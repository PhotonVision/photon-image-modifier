name: Build driver
on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: rubikpi3
            script: ./install_rubikpi3.sh
            base_image: "https://people.canonical.com/~platform/images/qualcomm-iot/rubikpi3/ubuntu-server-24.04/x00/ubuntu-24.04-preinstalled-server-arm64+rubikpi3-20250912-127.yaml"
                        
    name: "Build for ${{ matrix.name }}"

    steps:
    - uses: actions/checkout@v4.1.7
      with:
        fetch-depth: 0
    - name: Fetch tags
      run: git fetch --tags --force

    - name: Build rubikpi3 using YAML manifest
      if: matrix.name == 'rubikpi3'
      run: |
        set -ex
        sudo apt-get update
        sudo apt-get install -y yq wget xz-utils rsync
        
        # Download and process manifest
        wget -O manifest.yaml "${{ matrix.base_image }}"
        
        # Process each component using yq (compatible syntax)
        yq eval -r '.urls[] | .url + " " + .sha256sum' manifest.yaml | while read -r url sha; do
          filename=$(basename "$url")
          wget -O "$filename" "$url"
          echo "$sha  $filename" | sha256sum -c -
        done
        
        # Assembly process
        mkdir -p QLI
        # Extract .xz image(s)
        if ls *.xz 1>/dev/null 2>&1; then
          for f in *.xz; do unxz "$f"; done
        fi
        # Extract .tar.gz archive(s) directly into QLI
        if ls *.tar.gz 1>/dev/null 2>&1; then
          tar -xzf *.tar.gz -C QLI
        fi
        # Move any remaining files (rawprogram, dtb, img) into QLI
        mv rawprogram*.xml QLI/ 2>/dev/null || true
        mv dtb.bin QLI/ 2>/dev/null || true
        mv *.img QLI/ 2>/dev/null || true
        
        # Final image preparation
        cp QLI/ubuntu*.img rubikpi3.img
        dd if=/dev/zero bs=1M count=3800 >> rubikpi3.img
        
        # Set output for later steps
        echo "image=rubikpi3.img" >> $GITHUB_OUTPUT
      id: install_deps_rubikpi3

    - name: Compress built image
      run: |
        # Unmount if mounted (cleanup from custom rubikpi3 build)
        if mountpoint -q ./rootfs; then
          sudo umount ./rootfs
          rmdir ./rootfs
        fi
        
        # Use the custom built image
        mv ${{ steps.install_deps_rubikpi3.outputs.image }} photonvision_${{ matrix.name }}.img
        
        sudo xz -T 0 -v photonvision_${{ matrix.name }}.img

    - uses: actions/upload-artifact@v4.3.4
      with:
        name: photonvision_${{ matrix.name }}.img.xz
        path: photonvision_${{ matrix.name }}.img.xz
        if-no-files-found: error
        retention-days: 1

  release:
    needs: [build]
    runs-on: ubuntu-22.04
    steps:
      # Download literally every single artifact
      - uses: actions/download-artifact@v4.1.8
      - run: find
      # Push to dev release
      - uses: pyTooling/Actions/releaser@v1.0.5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: 'Dev'
          rm: true
          files: |
            **/*.xz
        if: github.event_name == 'push'
      # Upload all xz archives to GH tag if tagged
      - uses: softprops/action-gh-release@v2.0.8
        with:
          files: |
            **/*opi5*.xz
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: softprops/action-gh-release@v2.0.8
        with:
          files: |
            **/!(*opi5*).xz
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
